{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f7abc626-a100-44a8-8349-3483500217ad",
   "metadata": {},
   "source": [
    "# Test_photoz_kernels.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f373c97-a46b-4db1-aae2-730fd2bb0b1b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from delight.utils import *\n",
    "from delight.photoz_kernels_cy import kernelparts, kernelparts_diag\n",
    "from delight.photoz_kernels import Photoz_mean_function, Photoz_kernel\n",
    "\n",
    "size = 5\n",
    "NREPEAT = 2\n",
    "numBands = 2 # number of bands\n",
    "numLines = 3\n",
    "numCoefs = 5\n",
    "relative_accuracy = 0.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30024b94-53ec-4b2a-95d0-930c874c0b7c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def test_kernel():\n",
    "\n",
    "    for i in range(NREPEAT):\n",
    "        X = random_X_bzl(size, numBands=numBands)\n",
    "\n",
    "        fcoefs_amp, fcoefs_mu, fcoefs_sig \\\n",
    "            = random_filtercoefs(numBands, numCoefs)\n",
    "        lines_mu, lines_sig = random_linecoefs(numLines)\n",
    "        var_C, var_L, alpha_C, alpha_L, alpha_T = random_hyperparams()\n",
    "        print('Failed with params:', var_C, var_L, alpha_C, alpha_L, alpha_T)\n",
    "\n",
    "        gp = Photoz_kernel(fcoefs_amp, fcoefs_mu, fcoefs_sig,\n",
    "                           lines_mu, lines_sig, var_C, var_L,\n",
    "                           alpha_C, alpha_L, alpha_T,\n",
    "                           use_interpolators=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70b73ef2-c1cd-4e5d-a3e4-2c4ee86cceee",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_kernel()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1db2e486-f384-40e7-8102-fb7c0d8f6f13",
   "metadata": {},
   "source": [
    "## test_meanfunction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7595686-907d-44e5-8f17-96437e0b9dab",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5314120-93a6-4ba4-aa7b-c7c8c01f3886",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "numBands"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eacbfda6-2d24-48f5-9712-534273d8eb1b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "numCoefs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70956d68-d8d7-4e30-8566-3e30b7a9ae86",
   "metadata": {},
   "source": [
    "$f_{coefs} (amp,\\mu,\\sigma) \\simeq (n_b,n_{coeff})$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c31b6f2-180a-4dbb-9126-93539da74514",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "fcoefs_amp, fcoefs_mu, fcoefs_sig \\\n",
    "        = random_filtercoefs(numBands, numCoefs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e469e793-9778-469f-8f13-750bc083d9a7",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "fcoefs_amp.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "69ec4fd2-86f1-4715-a144-8150cd970ecf",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "fcoefs_amp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc2f7f5b-39e7-44c3-be3b-8206496251bd",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "fcoefs_mu.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c96e68b3-89a4-4604-a355-8e818a2628c0",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "fcoefs_sig.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1c61943-6ff9-4ce0-aeb5-af235f865d71",
   "metadata": {},
   "source": [
    "- $X$ of size $B Ã— 3$\n",
    "\n",
    "- $X_j = (b_j, z, l)$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b03fee51-12b2-49ec-9f9e-4d82015d39ed",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = random_X_bzl(size, numBands=numBands)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0889275-3fdd-4cc1-b2b5-6081b885d5a6",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "beb3730d-e0dc-49d8-bbde-ade0cc0f0d3b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c39b13cb-9619-4953-b287-5dd4f1a080bb",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "bands, redshifts, luminosities = np.split(X, 3, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a109f86-5620-4526-8568-663d33a375da",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "bands = bands.astype(int)\n",
    "bands"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf18c6b8-2898-4c90-82d4-68acd656da45",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "redshifts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aba767a4-7c8a-40ad-b0e5-cd46fadabcc2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "oneplusz = 1 + redshifts\n",
    "oneplusz "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ec8285e-5677-4a5d-9145-f70d8ed10eb6",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "luminosities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e93dea8a-124f-4285-87f8-e57efa159cdb",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "Photoz_mean_function?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c603db4e-1608-4a74-9723-23c2e6899267",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "mf = Photoz_mean_function(0.0, fcoefs_amp, fcoefs_mu, fcoefs_sig)\n",
    "mf.f(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70023aaf-5fe3-4425-bc93-a2cd1d7fc881",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "f_mod = np.zeros((size, ))\n",
    "f_mod "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "092e9ff2-bf99-4a85-808b-f628e5fd0b47",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# norms , one per band\n",
    "norms = np.sqrt(2*np.pi) * np.sum(fcoefs_amp * fcoefs_sig, axis=1)\n",
    "norms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a6a2d66-81e2-4c34-a38f-51d21ceb1144",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "for i in range(numCoefs):\n",
    "    amp, mu, sig = fcoefs_amp[bands, i], fcoefs_mu[bands, i], fcoefs_sig[bands, i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d51a977f-41a4-4275-9b2f-ec66d871cf7b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "amp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06d4e5d3-6fe5-4666-a31b-6dcac6fe9f35",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "mu.T.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bef2074d-ee49-411f-b172-f88d8fa1e45b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "sig.reshape(-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28ea4e9f-ab5e-47e4-8a79-d41321bf7b8e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def test_meanfunction():\n",
    "    \"\"\"\n",
    "    Other tests of the mean function\n",
    "    \"\"\"\n",
    "    fcoefs_amp, fcoefs_mu, fcoefs_sig \\\n",
    "        = random_filtercoefs(numBands, numCoefs)\n",
    "    \n",
    "    print(\"fcoefs_amp\",fcoefs_amp)\n",
    "    for i in range(NREPEAT):\n",
    "        X = random_X_bzl(size, numBands=numBands)\n",
    "        bands, redshifts, luminosities = np.split(X, 3, axis=1)\n",
    "        bands = bands.astype(int)\n",
    "        mf = Photoz_mean_function(0.0, fcoefs_amp, fcoefs_mu, fcoefs_sig)\n",
    "        assert mf.f(X).shape == (size, 1)\n",
    "\n",
    "        f_mod = np.zeros((size, ))\n",
    "        oneplusz = 1 + redshifts\n",
    "        norms = np.sqrt(2*np.pi) * np.sum(fcoefs_amp * fcoefs_sig, axis=1)\n",
    "        \n",
    "        print(i,norms)\n",
    "        \n",
    "        for i in range(numCoefs):\n",
    "            amp, mu, sig = fcoefs_amp[bands, i],\\\n",
    "                           fcoefs_mu[bands, i],\\\n",
    "                           fcoefs_sig[bands, i]\n",
    "            \n",
    "            amp = amp.reshape(-1)\n",
    "            mu = mu.reshape(-1)\n",
    "            sig = sig.reshape(-1)\n",
    "            \n",
    "            for k in range(size):\n",
    "                ell = luminosities[k]\n",
    "                lambdaMin = mu[k] - 4*sig[k]\n",
    "                lambdaMax = mu[k] + 4*sig[k]\n",
    "                print(f\"i={i} k = {k} \\t lmin, lmax\", lambdaMin, lambdaMax)\n",
    "                xf = np.linspace(lambdaMin, lambdaMax, num=200)\n",
    "                yf = amp[k] * np.exp(-0.5*((xf-mu[k])/sig[k])**2)\n",
    "                xfz = xf/oneplusz[k]\n",
    "                sed = ell * np.exp(-mf.alpha*(xfz-4.5e3))\n",
    "                fac = oneplusz[k] / mf.DL_z(redshifts[k])**2 / (4*np.pi)\n",
    "                print(\"-------------------------------------------------------\")\n",
    "                print(\"xf\",xf)\n",
    "                print(\"yf\",yf)\n",
    "                print(f\"k={k} \\t xf = {xf}\")\n",
    "                print(f\"k={k} \\t yf = {yf}\")\n",
    "                print(f\"k={k} \\t f_mod[k] = {f_mod[k]}\")\n",
    "                print(f\"k={k} \\t fac = {fac}\")\n",
    "                print(f\"k={k} \\t norms[bands[k]] = {norms[bands[k]]}\")\n",
    "                trap = np.trapz(sed*yf, x=xf)\n",
    "                print(f\"k={k} \\t trapz = {trap}\")\n",
    "                \n",
    "                f_mod[k] += mu[k] * np.trapz(sed*yf, x=xf)/ norms[bands[k]] * fac\n",
    "\n",
    "        f_mod2 = mf.f(X).ravel()\n",
    "        assert np.allclose(f_mod, f_mod2, rtol=relative_accuracy)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab604624-aea4-48d4-a238-dc1721776575",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_meanfunction()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d52c9b7e-f835-4f8f-a8fb-c44cdbe8c197",
   "metadata": {},
   "source": [
    "## test_interpolation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "800ac448-4539-4c1d-9c87-64c40e2c8f7a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def test_interpolation():\n",
    "\n",
    "    for i in range(NREPEAT):\n",
    "\n",
    "        fcoefs_amp, fcoefs_mu, fcoefs_sig \\\n",
    "            = random_filtercoefs(numBands, numCoefs)\n",
    "        lines_mu, lines_sig = random_linecoefs(numLines)\n",
    "        var_C, var_L, alpha_C, alpha_L, alpha_T = random_hyperparams()\n",
    "        norms = np.sqrt(2*np.pi) * np.sum(fcoefs_amp * fcoefs_sig, axis=1)\n",
    "        print('Failed with params:', var_C, var_L, alpha_C, alpha_L, alpha_T)\n",
    "\n",
    "        kern = Photoz_kernel(fcoefs_amp, fcoefs_mu, fcoefs_sig,\n",
    "                             lines_mu, lines_sig, var_C, var_L,\n",
    "                             alpha_C, alpha_L, alpha_T)\n",
    "\n",
    "        for j in range(numBands):\n",
    "\n",
    "            X = np.vstack((np.repeat(j, kern.nz),\n",
    "                           kern.redshiftGrid,\n",
    "                           np.repeat(1, kern.nz),\n",
    "                           np.repeat(0, kern.nz))).T\n",
    "            assert X.shape[0] == kern.nz\n",
    "            assert X.shape[1] == 4\n",
    "\n",
    "            Kfull = kern.K(X)\n",
    "            Kdiag = kern.Kdiag(X)\n",
    "            assert np.allclose(np.diag(Kfull), Kdiag, rtol=relative_accuracy)\n",
    "\n",
    "            b1 = kern.roundband(X[:, 0])\n",
    "            fz1 = (1. + X[:, 1])\n",
    "\n",
    "            kern.construct_interpolators()\n",
    "            kern.update_kernelparts(X)\n",
    "\n",
    "            ts = (kern.nz, kern.nz)\n",
    "            KC, KL = np.zeros(ts), np.zeros(ts)\n",
    "            D_alpha_C, D_alpha_L, D_alpha_z\\\n",
    "                = np.zeros(ts), np.zeros(ts), np.zeros(ts)\n",
    "            kernelparts(kern.nz, kern.nz, numCoefs, numLines,\n",
    "                        alpha_C, alpha_L,\n",
    "                        fcoefs_amp, fcoefs_mu, fcoefs_sig,\n",
    "                        lines_mu, lines_sig,\n",
    "                        norms, b1, fz1, b1, fz1,\n",
    "                        True, KL, KC,\n",
    "                        D_alpha_C, D_alpha_L, D_alpha_z)\n",
    "\n",
    "            assert np.allclose(KL, kern.KL, rtol=relative_accuracy)\n",
    "            assert np.allclose(KC, kern.KC, rtol=relative_accuracy)\n",
    "            assert np.allclose(D_alpha_C, kern.D_alpha_C,\n",
    "                               rtol=relative_accuracy)\n",
    "            assert np.allclose(D_alpha_L, kern.D_alpha_L,\n",
    "                               rtol=relative_accuracy)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b567d4e-69c1-4c9e-874c-7fa073cdd311",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_interpolation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c7f9c1e-91f2-467e-ab97-7f55a4970146",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "py311_rail",
   "language": "python",
   "name": "py311_rail"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
